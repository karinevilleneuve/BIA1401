[["index.html", "BIA1401 - 2024 - Introduction à R Chapitre 1 Introduction", " BIA1401 - 2024 - Introduction à R Chapitre 1 Introduction Ce petit guide à été rédigé à l’intention des élèves du cours BIA104 afin de familiariser les étudiants avec R et plus spécifiquement R Studio. La première section Introduction à R et RStudio présente brièvement R et R Studio. La seconde section Scripter avec RStudio explique comment élaborer des scripts avec RStudio et introduit quelques notions de bases. La troisième section Script pour BLAST comprend un script R que les étudiants doivent utiliser afin d’obtenir pour chacun de leurs inconnus la séquence d’acide nucléiques correspondant au gène ARNr 16S. Les étudiants pourront ensuite fournir les séquences à l’outil Basic Local Alignment Search Tool (BLAST) du National Center for Biotechnology Information (NCBI) afin d’attribuer une classification taxonomique à chacun de leurs inconnus. La quatrième section R Markdown aborde une différentes manière de rédiger ses scripts favorisant l’annotation et l’organisation du code en plus de l’exportation des scripts sous différents formats (PDF, HTML, etc.) pour le partage des scripts. Finalement, la section Installer R et RStudio indique les liens pour télécharger chacun des programmes. "],["introduction-à-r-et-rstudio.html", "Chapitre 2 Introduction à R et RStudio 2.1 Qu’est-ce que R et Rstudio 2.2 Composants de RStudio", " Chapitre 2 Introduction à R et RStudio 2.1 Qu’est-ce que R et Rstudio R est un langage de programmation dédié à la manipulation, l’analyse statistique et la visualisation de données. Développé au début des années 1990 par Ross Ihaka et Robert Gentleman afin d’enseigner l’introduction aux statistiques, le langage R possède aujourd’hui une impressionnante communauté d’utilisateurs et développeurs qui créent et partagent des milliers de package via le Comprehensive R Archive Network (CRAN). R est de plus en plus utilisé dans les domaines de la sciences des données massives, notamment pour les raisons suivantes : Le logiciel est gratuit et open source. Il est multiplateformes (Windows, Mac et Linux). Il possède d’excellentes capacités graphiques (idéal pour les figures d’articles scientifiques). Il est facile de développer vos propres fonctions (automatisation). Il possède une très grande communauté d’utilisateurs et de développeurs (beaucoup de librairies, aide, etc.). RStudio est, quant à lui, un environnement de développement intégré (Integrated Development Environment, IDE) qui permet de travailler non seulement en R mais aussi en d’autres languages de programmation comme Bash et Python. En programmation informatique, un IDE est est un logiciel de création d’applications qui rassemble des outils de développement fréquemment utilisés dans une seule interface utilisateur graphique (Graphical User Interface, GUI). L’interface graphique convivales de l’IDE facilite l’écriture de scripts et l’usage de R au quotidien. En d’autre termes, voici “l’histoire évolutive” d’un système de base (console R), vers l’utilisation de script et ultimement le recours à un IDE : R est un langage de programmation dit interpreté, où l’application R est une console/terminal qui doit recevoir des commandes R, une à la fois. Entrer les commandes directement en console (un peu comme avec une calculatrice) à le désavantage de ne pas être automatisable et de ne pas laisser de trace (peu reproductible). Le niveau “supérieur” d’utilisation consiste à regrouper une serie prédéterminée de commandes ensemble et de les enregistrer dans un fichier texte. En “donnant” le fichier de texte rempli de commandes R au terminal R, ce dernier les executera une a la fois, de la même façon que si un utilsateur les avait entrées. Un fichier de texte contenant des commandes d’un langage de programmation afin d’être executer s’appelle un script. Ainsi, une façon simpliste de programmer en R consiste à : ouvrir un éditeur de texte quelconque (comme Notepad), rédiger ses lignes de commandes R, enregistrer le tout comme un fichier script et finalement ouvrir un terminal pour appeler l’application R en lui “donnant” le script R. Pour un programmeur, avoir l’endroit où il rédige son code séparer de l’endroit ou il l’exécute devient rapidement fatiguant. La solution consiste à utiliser un environnement de développement intégré (IDE). Dans sa forme la plus basique, ce dernier consiste en une seule application combinant un éditeur de texte avec un terminal, pour faciliter l’envoie de commandes de l’un vers l’autre. De nos jours, les IDEs possèdent de nombreux autres outils pour aider au developement de code : un débogueur, un explorateur de fichiers, un résumé des variables… Même si certains IDEs sont specialisés pour un langage de programmation (comme R Studio avec R et Spyder avec Python), un IDE est une application séparée et indépendante du langage de programmation et il est possible d’utiliser n’importe lequel; il s’agit après tout d’un simple éditeur de texte. Certains IDEs comme le très populaire gratuit et open-source VSCode ont la prétention de pouvoir être utiliser pour n’importe quel langage. Parce qu’une image vaut mille mots… 2.2 Composants de RStudio L’interface RStudio inclut : un éditeur de code (Source), une console (Console) et terminal (Terminal), un gestionnaire de fichier (Files), une sorties graphiques (Plots), le gestionnaire de paquets (Pkgs), une aide en ligne (Help), le contenu de l’espace de travail (Environment), l’historique (History). Nous n’allons pas entrer dans les détails de chacun des composants mais voici les plus utiles : Source L’éditeur de code de RStudio est l’endroit où les scripts sont rédigés. Une variété de fonctionnalités facilitent la rédaction par notamment la mise en évidence d’erreur de syntaxe, l’auto-complétion, la recherche et remplacement de mots, etc. RStudio permet aussi d’exécuter de manière flexible le code R directement depuis l’éditeur de source. Nous abordons plus en détails la rédaction de scripts dans la section Scripter avec RStudio Console Le console est le cheval de bataille de R où le code rédigé est exécuté. Vous pouvez directement écrire votre code dans la console cependant le code qui y est écrit ne sera rédigé dans votre script. Files L’onglet files correspondant à l’outils Finder pour les utilisateurs de Mac et File explorer pour Windows. Il permet à l’utilisateur de naviguer à travers les dossiers sur son ordinateur. L’utilisateur peut aussi y créer de nouveaux dossiers et renommer ou supprimer des dossiers et documents. On peut aussi y définir un dossier comme répertoire de travail (Files -&gt; More -&gt; Set As Working Directory). Environment Un des concepts de base en programmation est la variable/objet. Une variable vous permet de stocker une valeur (par exemple 4) ou un objet (par exemple un tableau de données ou une fonction) à l’aide de l’opérateur d’assignation &lt;- ou =. Vous pouvez ensuite utiliser le nom de cette variable pour accéder facilement à la valeur ou à l’objet stocké dans cette variable. L’ensemble des objets stockés se retrouve dans l’onglet Environment de RStudio. "],["scripter-avec-rstudio.html", "Chapitre 3 Scripter avec RStudio 3.1 Créer un script 3.2 Exécuter une commande 3.3 Répertoire de travail 3.4 Utiliser des fonctions R 3.5 Commentaires 3.6 Importer un taleau de données", " Chapitre 3 Scripter avec RStudio Avant de débuter voici quelques bonnes pratiques et astuces du code R : Nom des variables: Autant que possible, utiliser des noms courts et explicites pour vos variables. Nommer une variable var n’est pas très instructif. Utilisez un trait de soulignement _ pour séparer les mots d’un nom ou essayez d’être constant! Évitez les noms d’objets de fonction qui existe dans R (e.g. c ou table) Espace : Ajoutez des espaces autour de tous les opérateurs (=, +, -, &lt;-, etc.) pour rendre le code plus lisible Mettez un espace après une virgule, mais jamais avant (comme en français). Valeurs de vos tableaux de données Les noms des colonnes et leur contenu n’ont ni accent, ni d’espace, ni caractères spéciaux puisque R préfère une seule suite de caractères comme titre. Par exemple, pour “Nombre d’espèces” il est préférable d’utiliser la forme “num_sp”. Autre La touche Tabulation ou Tab permet de compléter automatiquement les noms d’objets/fonction. Çela accélère l’entrée des commandes et évite les erreurs de frappe. 3.1 Créer un script Lorsque vous lancez RStudio, le premier élément que vous voyez à gauche de l’écran correspond à la console. Pour créer un nouveau script vous devez cliquez sur l’icone de la page blanche avec le symbole + vert en haut à gauche complètement. Dans le menu déroulant sélectionner R Script. La section R Markdown aborde une différentes manière de rédiger ses scripts favorisant l’annotation et l’organisation du code en plus de l’exportation des scripts sous différents formats (PDF, HTML, etc.) pour le partage des scripts. 3.2 Exécuter une commande Déplacez votre curseur sur la ligne que vous voulez exécuter puis cliquer sur le bouton run en haut à gauche. Vous pouvez aussi sélectionner plusieurs lignes à la fois. Le raccourcit clavier est Alt + Enter pour les utilisateurs Windows et Command + Enter pour les utilisateurs Mac. 3.3 Répertoire de travail Lorsque l’on demande à R d’importer un fichier, R recherche le nom du fichier qu’on lui a transmis dans le répertoire de travail (Working Directory, wd) actuellement défini, qui correspond au répertoire dans lequel R est actuellement en train de s’exécuter. Pour afficher le répertoire de travail actuel on utilise la fonction getwd(). Pour définir un répertoire de travail il existe plusieurs options : Utiliser la fonction setwd() : on inscrit entre les parenthèses et entre guillemets le “chemin” vers le dossier. Utiliser l’onglet Environnement : sélectionner un dossier ⇒ logo rouage (More) ⇒ Set As Working Directory. À partir de l’onglet Session : dans le menu déroulant sélectionner Set Working Directory ⇒ Change directory. Par exemple, par défault, le répertoire de travail des postes informatiques de l’UQAM est le dossier Documents. Si vous exécuter la fonction getwd() vous devriez obtenir un résultat similaire à celui-ci (ignorer le [1]) : getwd() [1] &quot;C:\\Users\\votrenom\\Documents&quot; Attention l’expression du chemin varie en fonction du système d’exploitation de l’ordinateur. Celui présenté plus haut est typique à Windows alors que pour Mac et Linux le chemin ressemble plutôt à ceci : getwd() [1] &quot;/Users/votrenom/Documents&quot; 3.4 Utiliser des fonctions R Le nom d’une fonction dans R est toujours suivi d’une paire de parenthèses même s’il n’y a rien de contenu entre les parenthèses (pensez à getwd()). Le ou les arguments d’une fonction sont placés entre parenthèses et séparés par des virgules. Vous pouvez considérer un argument comme un moyen de personnaliser l’utilisation ou le comportement d’une fonction. Enfin, l’un des principaux défis de R est de savoir quelle fonction utiliser pour une tâche particulière et comment l’utiliser. Heureusement, chaque fonction est toujours associée à un document d’aide qui explique comment utiliser la fonction (une recherche rapide sur Google vous aidera également généralement). Pour trouver de l’aide sur une fonction le point d’interrogation peut être utilisé. Exemple : ?getwd() 3.5 Commentaires Le symbole “#” est utilisé insérer des commentaires au sein d’un script. Cela indique à R d’ignorer tout ce qui se trouve sur une ligne à la suite du symbole “#” lors de l’exécution de commandes. Considérant que les commentaires sont ignorés par R lors de l’exécution de scripts, il est possible de se laisser des notes indiquant ce qui a été fait. Un script enrichi de commentaires est une excellente façon de collaborer à une science reproductible. Exemple : # J&#39;utilise la commde getwd() pour obtenir mon répertoire de travail getwd() 3.6 Importer un taleau de données Un tableau de données est une liste de vecteurs (de même taille) rangés colonne par colonne. Chaque colonne du tableau correspond à une variable, chaque ligne à une observation. Les variables peuvent être de type différent (numérique, booléen, character, …). Sous R, les tableaux de données sont des objets particuliers appelés data.frame. En analayse de données, les fichiers sont typiquement enregistrer sous le format Comma Seperated Value (csv). CSV est un format de fichier de texte simple utilisé pour stocker les données tabulaires, comme des feuilles de calcul ou des bases de données. Chaque ligne d’un fichier CSV représente une ligne et les valeurs d’une ligne sont séparées par des virgules. C’est un format de fichier simple et largement pris en charge qui permet d’importer et d’exporter facilement des données entre différentes applications logicielles. Pour importer ce type de fichier dans R on peut utiliser la fonction read.csv. Les arguments fréquemments utilisés pour cette fonction sont les suivants : file : Spécifier le nom du fichier (inclure l’extension) header : Indiquer si la première ligne de notre tableau correspond au nom des colonnes (valeurs possibles TRUE/FALSE) row.names : Indiquer quelle colone de notre tableau correspond au nom des rangés (valeurs possible = le numéro de la colonne) sep : Indiquer quel caractère doit servir de séparateur pour les colonnes (il peut arriver que d’autre symbole tels que le point-virgule servent de séparateur plutôt que la virgule) check.name : Ne pas systématiquement remplacer le trait d’union par un point (valeurs possible TRUE/FALSE) Exemple : df = read.csv(file = &quot;nom_fichier.csv&quot;, header = TRUE, row.names = 1, sep = &quot;,&quot;, check.names = FALSE) Pour un tableau en format tab delimited on peut utiliser la fonction read.table et spécifier \\t comme séparateur. "],["script-pour-blast.html", "Chapitre 4 Script pour BLAST", " Chapitre 4 Script pour BLAST En traitement de données, les tableaux de données dans lequel vous cherchez certaines informations peuvent comporter des milliers de lignes et plusieurs centaines de colonnes. Considérant la taille de ces fichiers, l’utilisation d’Excel n’est généralement pas possible. C’est donc pour cela que les analystes font appel à R. Pour trouver vos séquences commencer par télécharger le fichier sequences_inconnus.csv et l’enregistrer dans le dossier Documents. Si vous enregistrer le document dans un autre dossier il vous faudra changer de répertoire de travail avec la fonction setwd(). # Importer le fichier dans R raw_df = read.csv(&quot;sequences_inconnus.csv&quot;, header = TRUE, sep = &quot;,&quot;, check.name = FALSE) Vous devriez maintenant voir dans l’encadré Environnement l’objet raw_df 31 obs. of 7 variable sous le titre Data (coin supérieur droit). Basée sur ces informations vous pouvez déduire qu’il s’agit d’un tableau de données comportant 31 lignes et 7 colones. Vous pouvez afficher le tableau de données en cliquant sur l’objet qui s’ouvre dans un nouvel onglet. Pour filtrer un tableau de données nous pouvons utiliser la fonction subset(). Pour ce faire, il faut indiquer le nom de la colonne dans laquelle nous voulons appliquer le filtre et quelles valeurs rechercher. Ici nous avons deux filtres de recherche (jour du labo et numéro d’équipe) et donc nous utilisons le symbole &amp;. Avant d’exécuter cette ligne de code vous devez inscrire entre le guillements le jour de votre laboratoire (Mardi, Mercredi ou Jeudi, avec majuscule) et votre numéro d’équipe. df = subset(raw_df, Laboratoire == &quot;&quot; &amp; Equipe == &quot;&quot;) Si tout fonctionne, vous devriez maintenant voir un second objet df comportant 1 ligne et 7 colones. Vous pouvez finalement enregistrer ce tableau correspondant uniquement à vos résultats en utilisant la fonction write.csv(). write.csv(df, file = &quot;mes_inconnus.csv&quot;, quote = FALSE, row.names = FALSE) Vous pouvez ensuite ouvrir ce fichier avec Excel afin d’obtenir la séquence d’acide nucléique de chacun de vos inconnus pour la recherche avec BLAST. "],["r-markdown.html", "Chapitre 5 R Markdown 5.1 Utliser R Markdowm", " Chapitre 5 R Markdown Certains préfèrent rédiger leurs scripts dans des fichiers de type R Markdown plutôt que R Script pour diverses raions, notamment : Ce type de fichier permet de facilement annoter son script entre les sections de codes qui sont comprises dans un bloc (“chunk” en anglais). Un script bien annoter permet non seulement au scripteur de s’y retrouver facilement mais aussi de partager son code à ses collègues ou même publiquement. En effet, il est de plus en plus commun de retrouver dans les articles scientifiques un lien vers les scripts générés et uilisés par les auteurs de l’article afin d’analyser leurs données. Mais aussi, les blocs de codes permettent d’exécuter seulement certaines sections de code à la fois, ce qui ultimement permet de mofidier puis exécuter seulement ces sections de code sans avoir à re-exécuter l’entièreté du script. 5.1 Utliser R Markdowm Pour créer un fichier de type R Markdown sélectionner ce type de fichier plutôt que R Script dans le menu déroulant pour créer un nouveau fichier. Dans la nouvelle fenêtre qui s’ouvrira vous pouvez donner le titre que vous voulez à votre nouveau document puis sélectionner Ok.Par défault le nouveau document affiche une petite introduction ainsi que des exemples tel que sur l’image ci-dessous : Ces informations ne sont pas pertinentes et vous pouvez supprimer l’ensemble du texte sous l’entête (l’entête correspond à la section délimitée par les trois tirets ---). 5.1.1 Bloc de codes Dans R markdown, les lignes de codes à exécuter doivent être comprises dans un bloc de code. Le texte non compris dans un bloc n’est donc pas considéré comme du code, ce qui permet d’annoter minutieusement votre script entre les blocs afin de vous y retrouver facilement. Un bloc de code R doit toujours débuter avec les caractères suivants : ```{r} et se terminer avec les caractères suivant : ```. Un bloc de code ressemble donc à ceci : ```{r} ``` Un bloc de code peut être inséré avec l’une des façons suivantes : le raccourcit clavier : Ctrl + Alt + I tapper manuellement les caractères délimitants (```{r} ``` ) l’onglet Code puis Insert chunk le bouton vert avec le petit c et signe de plus en haut à droite. Un fois votre code rédigé dans le bloc, vous pouvez exécuter l’entièreté du code contenu dans ce block en appuyant sur le bouton vert en haut à droite du code ( ▶ ). Il est possible d’insérer des blocs de code de différents languages de programmation tels que Bash et Python, il suffit de remplacer le r entre les accolades par le nom du programme utilisé. Plusieurs autres options peuvent être appliqués sur les blocs, pour plus d’informations je vous recommande de consulter la documentation disponible sur internet. "],["installer-r-et-rstudio.html", "Chapitre 6 Installer R et RStudio", " Chapitre 6 Installer R et RStudio R est disponible gratuitement pour les systèmes d’opération Windows, Mac et Linux sur le site officiel des archives de R. Une fois R installé, vous pouvez procéder à l’installation de RStudio "],["références-et-liens-utiles.html", "Chapitre 7 Références et liens utiles", " Chapitre 7 Références et liens utiles An Introduction to R Introduction à R par GRICAD Grenoble Alpes Recherche - Infrastructure de Calcul Intensif et de Données Série d’ateliers R du CSBQ Data Science avec R Je recommande spécialement le Chapitre 3 Objets dans R et le Chapitre 4 S’exprimer dans R "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
